// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Processes document-based questions and answers them based only on the document's content.
 *
 * - processDocumentQuery - A function that handles the document query process.
 * - ProcessDocumentQueryInput - The input type for the processDocumentQuery function.
 * - ProcessDocumentQueryOutput - The return type for the processDocumentQuery function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProcessDocumentQueryInputSchema = z.object({
  documentDataUri: z
    .string()
    .describe(
      "A document to be analyzed, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  question: z.string().describe('The question related to the document.'),
  chatHistory: z.string().describe('The history of the conversation.'),
});
export type ProcessDocumentQueryInput = z.infer<
  typeof ProcessDocumentQueryInputSchema
>;

const ProcessDocumentQueryOutputSchema = z.object({
  answer: z
    .string()
    .describe(
      'The answer to the question based *only* on the provided document.'
    ),
});
export type ProcessDocumentQueryOutput = z.infer<
  typeof ProcessDocumentQueryOutputSchema
>;

export async function processDocumentQuery(
  input: ProcessDocumentQueryInput
): Promise<ProcessDocumentQueryOutput> {
  return processDocumentQueryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'processDocumentQueryPrompt',
  input: {schema: ProcessDocumentQueryInputSchema},
  output: {schema: ProcessDocumentQueryOutputSchema},
  prompt: `You are an AI assistant that answers questions based *exclusively* on the provided document content. Do not use any external knowledge. If the answer cannot be found in the document, state that clearly.

Here is the document for analysis:
{{media url=documentDataUri}}

Here is the chat history for context, but prioritize the document content for your answer:
---
{{chatHistory}}
---

Now, please answer the following question based only on the document provided:
Question: {{{question}}}`,
});

const processDocumentQueryFlow = ai.defineFlow(
  {
    name: 'processDocumentQueryFlow',
    inputSchema: ProcessDocumentQueryInputSchema,
    outputSchema: ProcessDocumentQueryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
