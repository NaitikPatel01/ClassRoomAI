// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Processes image-based questions and uses visual understanding for question interpretation and answer generation.
 *
 * - processImageQuery - A function that handles the image query process.
 * - ProcessImageQueryInput - The input type for the processImageQuery function.
 * - ProcessImageQueryOutput - The return type for the processImageQuery function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProcessImageQueryInputSchema = z.object({
  imageDataUri: z
    .string()
    .describe(
      "An image of the problem or diagram, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  question: z.string().describe('The question related to the image.'),
  chatHistory: z.string().describe('The history of the conversation.'),
});
export type ProcessImageQueryInput = z.infer<typeof ProcessImageQueryInputSchema>;

const ProcessImageQueryOutputSchema = z.object({
  answer: z.string().describe('The answer to the question based on the image.'),
});
export type ProcessImageQueryOutput = z.infer<typeof ProcessImageQueryOutputSchema>;

export async function processImageQuery(input: ProcessImageQueryInput): Promise<ProcessImageQueryOutput> {
  return processImageQueryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'processImageQueryPrompt',
  input: {schema: ProcessImageQueryInputSchema},
  output: {schema: ProcessImageQueryOutputSchema},
  prompt: `You are an AI assistant helping students with their questions based on provided images and chat history.

Consider the following chat history:
{{chatHistory}}

Analyze the image and answer the question using the image as context. Provide a clear and concise answer.

Image: {{media url=imageDataUri}}

Question: {{{question}}}`,
});

const processImageQueryFlow = ai.defineFlow(
  {
    name: 'processImageQueryFlow',
    inputSchema: ProcessImageQueryInputSchema,
    outputSchema: ProcessImageQueryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
